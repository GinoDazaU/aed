Problem 179: Largest Number

Objective: Arrange a list of non-negative integers to form the largest possible number.
Approach:
Convert the integers to strings to facilitate comparison.
Define a custom comparator that decides which combination of two numbers results in a larger number when concatenated.
Sort the array of strings based on this comparator.
Edge case: If the largest number is '0', return '0' (to handle cases like [0, 0]).
Note: A hash table isn't necessary for this problem since it's more about sorting with a custom comparator.
Problem 3271: Hash Divided String

Objective: Hash the string s into a new string result of length n / k.
Approach:
Divide the string s into substrings of length k.
For each substring:
Calculate the sum of the character indices ('a' → 0, 'b' → 1, ..., 'z' → 25).
Compute hashedChar = (sum) % 26.
Map hashedChar back to a character and append it to result.
Implementation:
Use simple loops and character manipulations.
A hash table isn't required for this problem.
Problem 706: Design HashMap

Objective: Implement a HashMap without using built-in hash table libraries.
Approach:
Since you've already implemented a HashTable class, you can adapt it to meet the requirements of this problem.
Modifications:
Adjust the HashTable class to handle integer keys and values.
Ensure methods align with the required put, get, and remove functionalities.
Methods to Implement:
void put(int key, int value);
int get(int key);
void remove(int key);

Ejercicio 1: Suma de Subarreglos Igual a K
Objetivo:

Dado un array de enteros y un número entero k, encuentra el número total de subarreglos continuos cuya suma es igual a k.

Enfoque para resolverlo:

Utilizar una tabla hash para almacenar sumas acumuladas:
Crea una tabla hash que mapee una suma acumulada a su frecuencia.
Iterar sobre el array y calcular sumas acumuladas:
Mientras recorres el array, mantiene una suma acumulada de los elementos.
Verificar si existe una suma previa que cumpla la condición:
Si suma_acumulada - k existe en la tabla hash, significa que hay un subarreglo que suma k.
Actualizar el contador y la tabla hash:
Incrementa un contador con la frecuencia de suma_acumulada - k.
Añade o actualiza la suma acumulada actual en la tabla hash.

  Ejercicio 2: Secuencia Consecutiva Más Larga
Objetivo:

Dado un array de enteros desordenado, encuentra la longitud de la secuencia de números consecutivos más larga.

Enfoque para resolverlo:

Almacenar todos los números en un conjunto:
Utiliza un set para una búsqueda rápida de elementos.
Identificar inicios de secuencias:
Itera sobre cada número y verifica si num - 1 no está en el conjunto; si no está, num es el inicio de una secuencia.
Contar la longitud de la secuencia:
Desde el inicio, incrementa un contador mientras num + 1, num + 2, etc., estén en el conjunto.
Actualizar la longitud máxima:
Mantén una variable para rastrear la longitud máxima de las secuencias encontradas.

  Ejercicio 3: Agrupar Palabras por Anagramas
Objetivo:

Dada una lista de palabras, agrupa las palabras que son anagramas entre sí.

Enfoque para resolverlo:

Utilizar una tabla hash para agrupar anagramas:
Las claves serán las palabras ordenadas alfabéticamente; los valores serán listas de palabras que son anagramas.
Procesar cada palabra:
Ordena los caracteres de la palabra para generar la clave.
Inserta la palabra original en la lista correspondiente en la tabla hash.
Recopilar los grupos de anagramas:
Al final, los valores de la tabla hash serán los grupos de anagramas.
